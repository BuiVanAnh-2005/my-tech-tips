// uploadSmart.js
// ‚úÖ T·ª± ƒë·ªông upload b√†i m·ªõi, b·ªè qua b√†i ƒë√£ c√≥

import fs from "fs";
import path from "path";
import { fileURLToPath, pathToFileURL } from "url";
import admin from "firebase-admin";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// === üîê Kh·ªüi t·∫°o Firebase Admin ===

const serviceAccount = JSON.parse(fs.readFileSync("./serviceAccountKey.json", "utf8"));


admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

const db = admin.firestore();
const postsRef = db.collection("posts");

// === üìÇ ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c data ===
const dataDir = path.join(__dirname, "src", "data");

async function uploadNewPosts() {
  console.log("üìÇ ƒêang t√¨m c√°c th∆∞ m·ª•c b√†i vi·∫øt...");

  // L·∫•y danh s√°ch th∆∞ m·ª•c con trong src/data/
  const categories = fs.readdirSync(dataDir).filter(dir =>
    fs.statSync(path.join(dataDir, dir)).isDirectory()
  );

  for (const category of categories) {
    const indexPath = path.join(dataDir, category, "index.js");
    if (!fs.existsSync(indexPath)) {
      console.warn(`‚ö†Ô∏è Kh√¥ng c√≥ index.js trong ${category}`);
      continue;
    }

    try {
      const mod = await import(pathToFileURL(indexPath).href);
      const posts = mod.default;

      if (!Array.isArray(posts) || posts.length === 0) {
        console.warn(`‚ö†Ô∏è Th∆∞ m·ª•c ${category} kh√¥ng c√≥ b√†i h·ª£p l·ªá`);
        continue;
      }

      console.log(`\nüìÅ ƒêang x·ª≠ l√Ω ${posts.length} b√†i trong "${category}"...`);

      for (const post of posts) {
        if (!post.title || !post.slug) {
          console.warn(`‚ö†Ô∏è B·ªè qua b√†i thi·∫øu title ho·∫∑c slug: ${post.id || "(kh√¥ng c√≥ id)"}`);
          continue;
        }

        // Ki·ªÉm tra xem b√†i ƒë√£ c√≥ trong Firestore ch∆∞a (theo slug)
        const querySnapshot = await postsRef.where("slug", "==", post.slug).get();

        if (!querySnapshot.empty) {
          console.log(`‚è≠Ô∏è ƒê√£ c√≥ s·∫µn: ${post.title}`);
          continue;
        }

        // Upload b√†i m·ªõi
        await postsRef.add(post);
        console.log(`‚úÖ ƒê√£ upload m·ªõi: ${post.title}`);
      }
    } catch (err) {
      console.error(`‚ùå L·ªói khi x·ª≠ l√Ω ${category}:`, err.message);
    }
  }

  console.log("\nüéâ Ho√†n t·∫•t upload b√†i m·ªõi!");
}

uploadNewPosts();
